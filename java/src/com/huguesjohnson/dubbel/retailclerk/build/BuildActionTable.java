/* https://github.com/huguesjohnson/DubbelLib/blob/main/LICENSE */

package com.huguesjohnson.dubbel.retailclerk.build;

import java.io.FileWriter;
import java.util.ArrayList;

import com.huguesjohnson.dubbel.retailclerk.build.objects.ActionTableEntry;
import com.huguesjohnson.dubbel.retailclerk.build.parameters.ActionTableParameters;
import com.huguesjohnson.dubbel.util.NumberFormatters;

public class BuildActionTable extends BaseBuilder{

	public static void build(String basePath,ActionTableParameters actionTable){
		FileWriter writer=null;
		try{
			writer=new FileWriter(basePath+actionTable.filePath);
			writer.write("; generated by build tools");
			writer.write(newLine);
			writer.write(newLine);
			//write the constants
			writer.write(";---------------------------------------------------------------------------");
			writer.write(newLine);
			writer.write("; action table constants");
			writer.write(newLine);
			writer.write(";---------------------------------------------------------------------------");
			writer.write(newLine);
			StringBuilder builder=new StringBuilder();
			builder.append("SCENE_COUNT=");
			builder.append(NumberFormatters.toHexWord(actionTable.sceneCount));
			builder.append(" ; total number of scenes");
			builder.append(newLine);
			builder.append("ACTION_COUNT=");
			builder.append(NumberFormatters.toHexWord(actionTable.actionCount));
			builder.append(" ; total number of actions");
			builder.append(newLine);
			builder.append("DAY_COUNT=");
			builder.append(NumberFormatters.toHexWord(actionTable.dayCount));
			builder.append(" ; total number of days");
			builder.append(newLine);
			builder.append("ACTION_COUNT_X4=(ACTION_COUNT*4)");
			builder.append(newLine);
			builder.append("SCENE_COUNT_X_ACTION_COUNT_X4=(SCENE_COUNT*ACTION_COUNT_X4)");
			builder.append(newLine);
			builder.append("DAY_COUNT_X4=(DAY_COUNT*4)");
			builder.append(newLine);
			builder.append(newLine);
			writer.write(builder.toString());
			writer.write("ActionTableStart:");
			writer.write(newLine);
			//now write the table
			ArrayList<ActionTableEntry> entries=new ArrayList<ActionTableEntry>();
			//probably less efficient than ArrayList.addAll but 1000x less confusing code
			entries.ensureCapacity(actionTable.entries.length);
			for(ActionTableEntry a:actionTable.entries){entries.add(a);}
			for(int day=0;day<actionTable.dayCount;day++){
				writer.write(";---------------------------------------------------------------------------");
				writer.write(newLine);
				writer.write("; day ");
				writer.write(String.valueOf(day));
				writer.write(newLine);
				writer.write(";---------------------------------------------------------------------------");
				writer.write(newLine);
				for(int scene=0;scene<actionTable.sceneCount;scene++){
					writer.write("; scene ");
					writer.write(String.valueOf(scene));
					writer.write(newLine);
					for(int action=0;action<actionTable.actionCount;action++){
						writer.write("\tdc.l\t");
						//see if we should use the default action
						ActionTableEntry a=new ActionTableEntry();
						a.day=day;
						a.scene=scene;
						a.action=action;
						int indexof=entries.indexOf(a);
						if(indexof>=0){
							writer.write(entries.get(indexof).label);
						}else{
							writer.write(actionTable.defaultLabels[action]);
						}
						writer.write(" ; action ");
						writer.write(String.valueOf(action));
						writer.write(newLine);
					}
				}
				writer.write(newLine);
			}
			writer.write("ActionTableEnd:");
		}catch(Exception x){
			x.printStackTrace();
		}finally{
			try{if(writer!=null){writer.flush();writer.close();}}catch(Exception x){ }
		}

	}
	
}