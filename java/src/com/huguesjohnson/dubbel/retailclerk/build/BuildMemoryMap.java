/* https://github.com/huguesjohnson/DubbelLib/blob/main/LICENSE */

package com.huguesjohnson.dubbel.retailclerk.build;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;

import com.huguesjohnson.dubbel.retailclerk.build.parameters.MemoryMapParameters;

public abstract class BuildMemoryMap extends BaseBuilder{

	@SuppressWarnings("resource") //resources are closed in finally block but Eclipse still warns
	public static void build(String basePath,MemoryMapParameters parameters) throws Exception{
		String destinationFile=basePath+parameters.destinationFile;
		String baseAddress=parameters.baseAddress;
		BufferedReader bufferedReader=null;
		OutputStreamWriter outputStreamWriter=null;
		int lineNumber=0;
		String currentLine=null;
		String sourceFile=null;
		ArrayList<String> names=new ArrayList<String>();
		try{
			outputStreamWriter=new FileWriter((new File(destinationFile)));
			outputStreamWriter.write("; generated by build tools");
			outputStreamWriter.write(newLine);
			outputStreamWriter.write(newLine);
			outputStreamWriter.write("MEM_START=$"+baseAddress+newLine);
			String currentAddressHex=baseAddress;
			long currentAddressInt=Long.valueOf(currentAddressHex,16);
			for(int fileIndex=0;fileIndex<parameters.sourceFiles.length;fileIndex++){
				sourceFile=basePath+parameters.sourceFiles[fileIndex];
				outputStreamWriter.write("; source file: "+parameters.sourceFiles[fileIndex]);
				outputStreamWriter.write(newLine);
				bufferedReader=new BufferedReader(new InputStreamReader(new FileInputStream(new File(sourceFile))));
				String address=baseAddress;
				while((currentLine=bufferedReader.readLine())!=null){
					lineNumber++;
					StringBuffer stringBuffer=new StringBuffer();
					if(currentLine.startsWith(";")){
						stringBuffer.append(currentLine);
					}else{
						String[] split=currentLine.split(",");
						if(split.length!=3){
							throw new Exception("Invalid length in line "+lineNumber+" expected 3 actual "+split.length);
						}
						String name=split[0];
						if(names.contains(name)){
							throw(new Exception("BuildMemoryMap - Duplicate constant name: "+name));
						}else{
							names.add(name);
						}
						stringBuffer.append(split[0]);
						stringBuffer.append("=$");
						address=Long.toHexString(currentAddressInt).toUpperCase();
						stringBuffer.append(address);
						stringBuffer.append("\t; ");
						stringBuffer.append(split[2]);
						int size=Integer.parseInt(split[1]);
						currentAddressInt+=size;
					}
					stringBuffer.append(newLine);
					outputStreamWriter.write(stringBuffer.toString());
				}
			}
			outputStreamWriter.write("MEM_END=$"+(Long.toHexString(currentAddressInt).toUpperCase())+newLine);
		}catch(Exception x){
			if(lineNumber>0){
				System.err.println("BuildMemoryMap error in line: "+lineNumber);
			}
			if(currentLine==null){
				System.err.println("currentLine==null");
			}else{
				System.err.println("currentLine="+currentLine);
			}
			if(sourceFile==null){
				System.err.println("sourceFile==null");
			}else{
				System.err.println("sourceFile="+sourceFile);
			}
			throw(x);
		}finally{
			try{if(bufferedReader!=null){bufferedReader.close();}}catch(Exception x){ }
			try{if(outputStreamWriter!=null){outputStreamWriter.flush();outputStreamWriter.close();}}catch(Exception x){ }
		}
	}
}
