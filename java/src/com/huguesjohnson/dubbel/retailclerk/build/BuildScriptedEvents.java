/* https://github.com/huguesjohnson/DubbelLib/blob/main/LICENSE */

package com.huguesjohnson.dubbel.retailclerk.build;

import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Paths;

import com.google.gson.Gson;
import com.huguesjohnson.dubbel.retailclerk.build.objects.ScriptedEvent;
import com.huguesjohnson.dubbel.retailclerk.build.objects.ScriptedEventAction;
import com.huguesjohnson.dubbel.retailclerk.build.parameters.SimpleSourceDestinationParameters;

public class BuildScriptedEvents extends BaseBuilder{
	public static void build(String basePath,SimpleSourceDestinationParameters parameters){
		FileWriter writer=null;
		ScriptedEvent[] events=null;
		int scriptedEventIndex=-1;
		int actionIndex=-1;
		try{
			writer=new FileWriter(basePath+parameters.destinationFile);
			writer.write("; generated by build tools");
			writer.write(newLine);
			writer.write(newLine);
			//read the movement patterns
			String textJson=Files.readString(Paths.get(basePath+parameters.sourceFile));
			events=(new Gson()).fromJson(textJson,ScriptedEvent[].class);
			for(scriptedEventIndex=0;scriptedEventIndex<events.length;scriptedEventIndex++){
				writer.write(events[scriptedEventIndex].name+"Start:");
				writer.write(newLine);
				ScriptedEventAction[] actions=events[scriptedEventIndex].actions;
				for(actionIndex=0;actionIndex<actions.length;actionIndex++){
					ScriptedEventAction action=actions[actionIndex];
					if((action.comment!=null)&&(action.comment.length()>0)){
						writer.write("\t; "+action.comment);
						writer.write(newLine);
					}
					if(action.command!=null){
						writer.write("\tdc.w\t"+action.command.toString());
						writer.write(newLine);
					}
					if(action.direction!=null){
						writer.write("\tdc.w\t"+action.direction.toString());
						writer.write(newLine);
					}
					if(action.intValue!=null){
						//this is such a weird way to convert an Integer to a hexstring
						StringBuilder sb=new StringBuilder(Integer.toHexString(action.intValue.intValue()));
						while(sb.length()<4){sb.insert(0,'0');}
						sb.insert(0,"\tdc.w\t$");
						writer.write(sb.toString());
						writer.write(newLine);
					}
					if((action.intConst!=null)&&(action.intConst.length()>0)){
						writer.write("\tdc.w\t"+action.intConst);
						writer.write(newLine);
					}
					if((action.label!=null)&&(action.label.length()>0)){
						writer.write("\tdc.l\t"+action.label);
						writer.write(newLine);
					}
				}
				writer.write(events[scriptedEventIndex].name+"End:");
				writer.write(newLine);
				writer.write(newLine);
			}
		}catch(Exception x){
			x.printStackTrace();
			System.err.println("parameters.sourceFile="+parameters.sourceFile);
			System.err.println("parameters.destinationFile="+parameters.destinationFile);
			if(events==null){
				System.err.println("events==null");
			}else{
				System.err.println("scriptedEventIndex="+scriptedEventIndex);
				System.err.println("actionIndex="+actionIndex);
				if(scriptedEventIndex<0){
					System.err.println("scriptedEventIndex<0 (which you already know)");
				}else if(scriptedEventIndex>=events.length){
					System.err.println("scriptedEventIndex>=events.length");
					System.err.println("events.length="+events.length);
				}else{
					if(events[scriptedEventIndex]==null){
						System.err.println("events[scriptedEventIndex]==null");
					}else{
						System.err.println("events[scriptedEventIndex].name="+events[scriptedEventIndex].name);
					}
				}
			}			
		}finally{
			try{if(writer!=null){writer.flush();writer.close();}}catch(Exception x){ }
		}
	}
}
